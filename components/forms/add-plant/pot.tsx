import { Box, Spinner } from "@chakra-ui/react";
import { Plant } from "@main/common-types/plant";
import { useUserAuth } from "@main/contexts/AuthContext";
import { addPlant } from "@main/data/firestore";
import { useFirestoreQuery } from "@main/data-models";
import useFormContext from "@main/hooks/useFormContext";
import { serverTimestamp } from "firebase/firestore";
import Image from "next/image";
import { useRouter } from "next/router";
import React, { useState } from "react";

const potTypes = {
  clay: {
    name: "Clay",
    image: "/images/pots/clay.png",
    value: "clay",
  },
  ceramic: {
    name: "Ceramic",
    image: "/images/pots/ceramic.png",
    value: "ceramic",
  },
  glass: {
    name: "Glass",
    image: "/images/pots/glass.png",
    value: "glass",
  },
  metal: {
    name: "Metal",
    image: "/images/pots/metal.png",
    value: "metal",
  },
  plastic: {
    name: "Plastic",
    image: "/images/pots/plastic.png",
    value: "plastic",
  },
  selfWatering: {
    name: "Self-Watering",
    image: "/images/pots/self-watering.png",
    value: "selfWatering",
  },
};



const AddPotType: React.FC = () => {
  const router = useRouter();
  const { id } = router.query;
  const { data, isLoading, error } = useFirestoreQuery<Plant>(`plants/`);
  const { formData, setPotType } = useFormContext();
  const { user } = useUserAuth();

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [selectedPot, setSelectedPot] = useState<string | null>(null);

  if (isLoading) {
    return (
      <div className="bg-monstera-100 fixed flex justify-center items-center w-screen h-screen">
        <Spinner className="relative bottom-[96px] " />
      </div>
    );
  }

  const getCommonName = (): Plant | undefined => {
    if (data) {
      const plant = data.filter((plant) => plant.id === id);
      return plant[0];
    }
    return undefined;
  };

  if (error) {
    return <div>Error</div>;
  }

  const handleSubmit = async (): Promise<void> => {
    if (formData.pot && formData.pot !== "") {
      await addPlant(
        {
          icon: getCommonName().emoji,
          nickname: formData.nickname,
          sunlight: formData.sunlight,
          pot: formData.pot,
          level: 1,
          timeCreated: serverTimestamp(),
          timeLastWatered: serverTimestamp(),
          botanicalName: router && router.query.id,
          commonName: getCommonName().commonName[0],
          baseDaysBetweenWatering: getCommonName().baseDaysBetweenWatering,
        },
        user.uid
      )
        .then(() => router.push("/garden"))
        .then(() => router.reload());
      // router.reload is not ideal here since it flashes the login page for a moment
      // I'm using it beucase it updates the garden page with the new plant's ID generated by firestore
      // maybe fixable with a useEffect dependency array or SSR
    }
  };

  return (
    <div className="flex flex-col items-center mx-[24px]">
      <section className="md:pt-[121px] pt-[60px] pb-[24px] md:pb-[80px] flex flex-col items-center gap-[16px] md:gap-[32px]">
        <div className="flex items-center justify-center w-full">
          <div className="text-[64px]">
            {data &&
              data
                .filter((plant) => plant.id === id)
                .map((plant, index) => <div key={index}>{plant.emoji}</div>)}
          </div>
        </div>
        {data &&
          data
            .filter((plant) => plant.id === id)
            .map((plant, index) => (
              <h2
                key={index}
                className="text-[20px] text-[#32695F] text-center"
              >
                What type of pot will your {plant.commonName[0].toLowerCase()}{" "}
                be in?
              </h2>
            ))}
      </section>

      <section className="w-full md:w-1/4">
        {/* TODO: fix mobile responsivemeness with these buttons */}
        <div className="flex flex-wrap justify-center gap-[16px]">
          {Object.keys(potTypes).map((type, index) => (
            <button
              key={index}
              tabIndex={0}
              className={`flex flex-row items-center gap-[8px] cursor-pointer bg-white rounded-[16px] px-[16px] py-[8px]
        shadow-sm hover:shadow-md transition duration-300 ease-in-out ${
          formData.pot === type ? "bg-monstera-700 text-white" : "bg-white"
        }`}
              onClick={() => {
                setSelectedPot(type);
                setPotType(potTypes[type].value);
              }}
            >
              <Image
                src={potTypes[type].image}
                alt={potTypes[type].name}
                width="32px"
                height="32px"
              />
              <p className="text-[12px]">{potTypes[type].name}</p>
            </button>
          ))}
        </div>
      </section>

      <section className="fixed bottom-safe min-w-1/2 w-[342px] md:pb-[80px]">
        <Box
          className="shadow tracking-tight font-[500]"
          as="button"
          lineHeight="1.2"
          transition="all 0.2s cubic-bezier(.08,.52,.52,1)"
          py="11px"
          width="100%"
          borderRadius="999px"
          fontSize="18px"
          opacity={formData.pot ? "1" : "0.4"}
          bg="#ffffff"
          color="#606F73"
          _hover={
            formData.pot
              ? { background: "#fcfcfc", transform: "scale(1.0)" }
              : {}
          }
          _active={
            formData.pot
              ? {
                  bg: "#ffffff",
                  transform: "scale(0.98)",
                  borderColor: "#bec3c9",
                }
              : {}
          }
          _focus={
            formData.pot
              ? {
                  boxShadow:
                    "0 0 1px 1px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)",
                }
              : {}
          }
          onClick={handleSubmit}
        >
          Add to garden
        </Box>
      </section>
    </div>
  );
};

export default AddPotType;
